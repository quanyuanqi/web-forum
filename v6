from fasthtml.common import *
from time import time
from passlib.context import CryptContext
from functools import wraps

# Add styles for thread title links and auth-related elements
Style('''
.thread-title {
    color: #0066cc;
}
.thread-title:visited {
    color: #666666;
}
.auth-links {
    float: right;
    margin: 10px;
}
.auth-links a {
    margin-left: 10px;
    text-decoration: none;
    color: #0066cc;
}
.mw-480 {
    max-width: 480px;
}
.mx-auto {
    margin-left: auto;
    margin-right: auto;
}
''')

# Password hashing setup
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def render(thread):
    tid = f'thread-{thread.id}'
    edit_delete_controls = ''
    
    # Only show edit/delete controls if user is authenticated and is the author
    if hasattr(thread, 'author') and thread.author:
        edit_delete_controls = Div(
            A('Edit', hx_get=f'/edit/{thread.id}', hx_target='body',
              style='margin-right: 10px;'),
            A('Delete', hx_delete=f'/delete/{thread.id}',
              hx_target=f'#{tid}', hx_swap='outerHTML',
              style='color: red;',
              onclick="return confirm('Are you sure you want to delete this thread?')"
            ),
            style='margin-bottom: 10px;'
        )

    return Li(H4(A(thread.title, 
                   hx_get=f'/thread/{thread.id}',
                   hx_target='body',
                   style='text-decoration: none; cursor: pointer;',
                   class_='thread-title')),
             P(thread.content),
             P(f'Posted by: {thread.email or "Anonymous"}'),
             edit_delete_controls,
             P(f'Posted: {format_time(thread.created_at)}'),
             id=tid,
             class_='thread-item')

# Database setup
app, rt, threads, Thread = fast_app('forum.db', live=True, render=render,
                                  id=int, title=str, content=str, 
                                  created_at=float, email=str, author=str, pk='id')

# User database setup
db = database('data/users.db')
users = db.t.users

if users not in db.t:
    users.create(dict(email=str, password=str), pk='email')
    
User = users.dataclass()

def format_time(timestamp):
    if not timestamp:
        return 'Unknown time'
    from datetime import datetime
    return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

# Authentication decorator
def basic_auth(f):
    @wraps(f)
    def wrapper(session, *args, **kwargs):
        if "auth" not in session:
            return Response('Not Authorized - Please login first', status_code=401)
        return f(session, *args, **kwargs)
    return wrapper

def auth_header():
    return Div(
        A('Login', href='/login'),
        A('Register', href='/register'),
        class_='auth-links'
    )

def mk_form(session):
    if 'auth' not in session:
        return P("Please login to post threads")
        
    return Form(
        Group(
            Input(placeholder='Thread title', id='title', required=True),
            Input(placeholder='Thread content', id='content', required=True,
                 style='height: 100px; width: 100%;'),
            Button('Post Thread')
        ),
        hx_post = '/',
        hx_target = '#thread-list',
        hx_swap = 'afterbegin'
    )

def mk_edit_form(thread):
    return Div(
        A('← Back to Home', hx_get='/', hx_target='body', 
          style='display: block; margin-bottom: 20px; text-decoration: none;'),
        Form(
            Group(
                Label('Title:'),
                Input(name='title', required=True, value=thread.title,
                     style='width: 100%; margin-bottom: 10px;'),
                Label('Content:'),
                Input(name='content', required=True,
                     value=thread.content,
                     style='height: 100px; width: 100%; margin-bottom: 10px;'),
                Div(
                    Button('Save Changes', style='margin-right: 10px;'),
                    A('Cancel', hx_get='/', hx_target='body', class_='cancel-link'),
                    style='margin-top: 10px;'
                )
            ),
            hx_post = f'/edit/{thread.id}',
            hx_target = 'body'
        )
    )

# Login and Register form helper
def auth_form(btn_text, target):
    return Form(
        Input(id="email", type="email", placeholder="Email", required=True),
        Input(id="password", type="password", placeholder="Password", required=True),
        Button(btn_text, type="submit"),
        Span(id="error", style="color:red"),
        hx_post=target,
        hx_target="#error",
    )

# Login routes
@rt('/login')
def get():
    return Container(
        Article(
            A('← Back to Home', hx_get='/', hx_target='body', 
              style='display: block; margin-bottom: 20px; text-decoration: none;'),
            H1("Login"),
            auth_form("Login", target="/login"),
            Hr(),
            P("Want to create an Account? ", A("Register", href="/register")),
            class_="mw-480 mx-auto"
        )
    )

@rt('/login')
def post(session, email:str, password:str):
    try:
        user = users[email]
    except NotFoundError:
        return "Email or password are incorrect"
    
    if not pwd_context.verify(password, user.password):
        return "Email or password are incorrect"

    session['auth'] = user.email
    
    return HttpHeader('HX-Redirect', '/')

# Register routes
@rt('/register')
def get():
    return Container(
        Article(
            A('← Back to Home', hx_get='/', hx_target='body', 
              style='display: block; margin-bottom: 20px; text-decoration: none;'),
            H1("Register"),
            auth_form("Register", "/register"),
            Hr(),
            P("Already have an account? ", A("Login", href="/login")),
            class_="mw-480 mx-auto"
        )
    )

@rt('/register')
def post(email:str, password:str):
    try:
        users[email]
        return "User already exists"
    except NotFoundError:
        new_user = User(email=email, password=pwd_context.hash(password))
        users.insert(new_user)
        return HttpHeader('HX-Redirect', '/login')

# Logout route
@rt('/logout')
def post(session):
    if 'auth' in session:
        del session['auth']
    return HttpHeader('HX-Redirect', '/login')

@rt('/')
def get(session):
    # Get latest 20 threads, handling None created_at values
    all_threads = threads()
    # Set a default timestamp for threads without created_at
    for thread in all_threads:
        if thread.created_at is None:
            thread.created_at = 0
    latest_threads = sorted(all_threads, 
                          key=lambda t: t.created_at or 0,
                          reverse=True)[:20]
    
    # Show different header based on auth status
    header = auth_header() if 'auth' not in session else Div(
        Span(f"Welcome, {session['auth']}", style="margin-right: 10px;"),
        Button("Logout", hx_post="/logout", style="color: red;"),
        class_="auth-links"
    )
    
    return Titled('Forum',
                 header,
                 Card(
                     mk_form(session),
                     Ul(*[render(t) for t in latest_threads], id='thread-list', class_='thread-list')
                 ))

@rt('/')
@basic_auth
def post(session, thread: Thread):
    user_email = session['auth']
    thread.created_at = time()
    thread.email = user_email
    thread.author = user_email
    new_thread = threads.insert(thread)
    return render(new_thread)

@rt('/edit/{tid}')
@basic_auth
def get(session, tid: int):
    thread = threads[tid]
    if thread.author != session['auth']:
        return Response('Not authorized to edit this thread', status_code=403)
    return Titled('Edit Thread',
                 Card(mk_edit_form(thread)))

@rt('/edit/{tid}')
@basic_auth
def post(session, tid: int, thread: Thread):
    existing = threads[tid]
    if existing.author != session['auth']:
        return Response('Not authorized to edit this thread', status_code=403)
    existing.title = thread.title
    existing.content = thread.content
    threads.update(existing)
    return Redirect('/')

@rt('/delete/{tid}')
@basic_auth
def delete(session, tid: int):
    thread = threads[tid]
    if thread.author != session['auth']:
        return Response('Not authorized to delete this thread', status_code=403)
    threads.delete(tid)
    return ''

@rt('/thread/{tid}')
def get(tid: int):
    thread = threads[tid]
    edit_delete_controls = ''
    
    return Titled(thread.title,
                 Card(
                     A('← Back to Home', hx_get='/', hx_target='body',
                       style='display: block; margin-bottom: 20px; text-decoration: none;'),
                     H2(thread.title),
                     P(thread.content, style='margin: 20px 0;'),
                     P(f'Posted by: {thread.email or "Anonymous"}', style='color: #666;'),
                     P(f'Posted: {format_time(thread.created_at)}',
                       style='color: #666;')
                 ))

serve()
