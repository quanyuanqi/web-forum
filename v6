from fasthtml.common import *
from time import time
from passlib.context import CryptContext
from functools import wraps
import os
from collections import defaultdict
from secrets import token_urlsafe

# Add styles for thread title links and auth-related elements
Style('''
.thread-title {
    color: #0066cc;
}
.thread-title:visited {
    color: #666666;
}
.auth-links {
    float: right;
    margin: 10px;
}
.auth-links a {
    margin-left: 10px;
    text-decoration: none;
    color: #0066cc;
}
.mw-480 {
    max-width: 480px;
}
.mx-auto {
    margin-left: auto;
    margin-right: auto;
}
''')

# Password hashing setup
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

failed_attempts = defaultdict(list)
MAX_ATTEMPTS = 5
LOCKOUT_TIME = 300  # 5 minutes

GENERIC_ERROR = "An error occurred. Please try again later."
AUTH_ERROR = "Invalid credentials"

def check_rate_limit(email):
    now = time()
    # Remove attempts older than lockout time
    failed_attempts[email] = [t for t in failed_attempts[email] 
                            if now - t < LOCKOUT_TIME]
    if len(failed_attempts[email]) >= MAX_ATTEMPTS:
        return False
    return True

def render(thread, session=None):
    tid = f'thread-{thread.id}'
    edit_delete_controls = ''
    
    # Only show edit/delete controls if user is authenticated and is the author
    if session and 'auth' in session and hasattr(thread, 'author') and thread.author == session['auth']:
        edit_delete_controls = Div(
            A('Edit', hx_get=f'/edit/{thread.id}', hx_target='body',
              style='margin-right: 10px;'),
            A('Delete', hx_delete=f'/delete/{thread.id}',
              hx_target=f'#{tid}', hx_swap='outerHTML',
              style='color: red;',
              onclick="return confirm('Are you sure you want to delete this thread?')"
            ),
            style='margin-bottom: 10px;'
        )

    # Get username for display
    try:
        if thread.email:
            author = users[thread.email]
            author_display = getattr(author, 'username', 'Anonymous')
            # Add link to author's profile
            author_element = A(author_display, 
                             href=f'/profile/{author_display}',
                             style="text-decoration: none;")
        else:
            author_display = "Anonymous"
            author_element = Span(author_display)
    except NotFoundError:
        author_display = "Anonymous"
        author_element = Span(author_display)

    return Li(H4(A(thread.title, 
                   hx_get=f'/thread/{thread.id}',
                   hx_target='body',
                   style='text-decoration: none; cursor: pointer;',
                   class_='thread-title')),
             P(thread.content),
             P("Posted by: ", author_element),
             edit_delete_controls,
             P(f'Posted: {format_time(thread.created_at)}'),
             id=tid,
             class_='thread-item')

# Database setup
app, rt, threads, Thread = fast_app('forum.db', live=True, render=render,
                                  id=int, title=str, content=str, 
                                  created_at=float, email=str, author=str, pk='id')

# User database setup
db = database('users.db')
users = db.t.users

# Create users table with correct schema
if users not in db.t:
    users.create({
        'email': str,
        'password': str,
        'username': str,
        'is_admin': bool
    }, pk='email')

User = users.dataclass()

def is_admin(session):
    """Check if the current user is an admin (has username 'bigboy')."""
    if not session or 'auth' not in session:
        return False
    try:
        user = users[session['auth']]
        return getattr(user, 'username', '') == 'bigboy'
    except NotFoundError:
        return False

def find_user_by_username(username):
    """Find a user by their username."""
    for user in users():
        if getattr(user, 'username', None) == username:
            return user
    raise NotFoundError()

def format_time(timestamp):
    if not timestamp:
        return 'Unknown time'
    from datetime import datetime
    return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

# Authentication decorator
def basic_auth(f):
    """Decorator to require login."""
    @wraps(f)
    def wrapper(session, *args, **kwargs):
        if "auth" not in session:
            return Response('Not Authorized - Please login first', status_code=401)
        return f(session, *args, **kwargs)
    return wrapper

def auth_header():
    return Div(
        A('Login', href='/login'),
        A('Register', href='/register'),
        class_='auth-links'
    )

def mk_form(session):
    if 'auth' not in session:
        return P("Please login to post threads")
        
    return Form(
        Group(
            Input(placeholder='Thread title', id='title', required=True),
            Input(placeholder='Thread content', id='content', required=True,
                 style='height: 100px; width: 100%;'),
            Button('Post Thread')
        ),
        hx_post = '/',
        hx_target = '#thread-list',
        hx_swap = 'afterbegin'
    )

def mk_edit_form(thread):
    return Div(
        A('← Back to Home', hx_get='/', hx_target='body', 
          style='display: block; margin-bottom: 20px; text-decoration: none;'),
        Form(
            Group(
                Label('Title:'),
                Input(name='title', required=True, value=thread.title,
                     style='width: 100%; margin-bottom: 10px;'),
                Label('Content:'),
                Input(name='content', required=True,
                     value=thread.content,
                     style='height: 100px; width: 100%; margin-bottom: 10px;'),
                Div(
                    Button('Save Changes', style='margin-right: 10px;'),
                    A('Cancel', hx_get='/', hx_target='body', class_='cancel-link'),
                    style='margin-top: 10px;'
                )
            ),
            hx_post = f'/edit/{thread.id}',
            hx_target = 'body'
        )
    )

# Login and Register form helper
def auth_form(btn_text, target, include_username=False):
    inputs = []
    if include_username:
        inputs.append(Input(id="username", type="text", placeholder="Username", required=True))
    inputs.extend([
        Input(id="email", type="email", placeholder="Email", required=True),
        Input(id="password", type="password", placeholder="Password", required=True),
        Button(btn_text, type="submit"),
        Span(id="error", style="color:red")
    ])
    return Form(
        *inputs,
        hx_post=target,
        hx_target="#error",
    )

# Login routes
@rt('/login')
def get():
    return Container(
        Article(
            A('← Back to Home', hx_get='/', hx_target='body', 
              style='display: block; margin-bottom: 20px; text-decoration: none;'),
            H1("Login"),
            auth_form("Login", target="/login"),
            Hr(),
            P("Want to create an Account? ", A("Register", href="/register")),
            class_="mw-480 mx-auto"
        )
    )

@rt('/login')
def post(session, email:str, password:str):
    try:
        user = users[email]
        print(f"Login attempt for {email}")  # Debug log
        
        if not pwd_context.verify(password, user.password):
            print("Password verification failed")  # Debug log
            return "Email or password are incorrect"

        session['auth'] = user.email
        print(f"Login successful for {email}")  # Debug log
        
        return HttpHeader('HX-Redirect', '/')
    except NotFoundError:
        print(f"User not found: {email}")  # Debug log
        return "Email or password are incorrect"

# Register routes
@rt('/register')
def get():
    return Container(
        Article(
            A('← Back to Home', hx_get='/', hx_target='body', 
              style='display: block; margin-bottom: 20px; text-decoration: none;'),
            H1("Register"),
            auth_form("Register", "/register", include_username=True),
            Hr(),
            P("Already have an account? ", A("Login", href="/login")),
            class_="mw-480 mx-auto"
        )
    )

@rt('/register')
def post(email:str, password:str, username:str):
    if not username or len(username.strip()) < 3:
        return "Username must be at least 3 characters long"
    
    # Check if username is taken
    for user in users():
        if getattr(user, 'username', None) == username:
            return "Username already taken"
    
    try:
        users[email]
        return "User with this email already exists"
    except NotFoundError:
        new_user = User(
            email=email,
            password=pwd_context.hash(password),
            username=username,
            is_admin=(username == 'bigboy')  # Admin status based on username
        )
        users.insert(new_user)
        return HttpHeader('HX-Redirect', '/login')

# Logout route
@rt('/logout')
def post(session):
    if 'auth' in session:
        del session['auth']
    return HttpHeader('HX-Redirect', '/login')

def get_thread_stats():
    from datetime import datetime, timedelta
    
    now = datetime.now()
    today_start = datetime(now.year, now.month, now.day).timestamp()
    week_ago = (now - timedelta(days=7)).timestamp()
    month_ago = (now - timedelta(days=30)).timestamp()
    
    all_threads = threads()
    today_count = 0
    week_count = 0
    month_count = 0
    
    for thread in all_threads:
        created_at = thread.created_at or 0
        if created_at >= today_start:
            today_count += 1
            week_count += 1
            month_count += 1
        elif created_at >= week_ago:
            week_count += 1
            month_count += 1
        elif created_at >= month_ago:
            month_count += 1
    
    return today_count, week_count, month_count

def render_stats():
    today_count, week_count, month_count = get_thread_stats()
    
    return Article(
        H2("Forum Statistics", style="text-align: center;"),
        Div(
            Article(
                H3(str(today_count)),
                P("New threads today"),
                style="text-align: center; padding: 20px;"
            ),
            Article(
                H3(str(week_count)),
                P("New threads this week"),
                style="text-align: center; padding: 20px;"
            ),
            Article(
                H3(str(month_count)),
                P("New threads this month"),
                style="text-align: center; padding: 20px;"
            ),
            style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin: 20px 0;"
        ),
        P(
            "Please ", 
            A("login", href="/login"), 
            " or ",
            A("register", href="/register"),
            " to view and participate in discussions.",
            style="text-align: center; margin-top: 20px;"
        )
    )

def admin_required(f):
    """Decorator to require admin access."""
    @wraps(f)
    def wrapper(session, *args, **kwargs):
        if not is_admin(session):
            return Response('Admin access required', status_code=403)
        return f(session, *args, **kwargs)
    return wrapper

# Admin management page
@rt('/mp')
@basic_auth  # First check if user is logged in
@admin_required  # Then check if user is admin
def get(session):
    all_users = users()
    all_threads = threads()
    
    def get_author_display(thread):
        """Helper function to safely get author display name."""
        if not thread.email:
            return 'Anonymous'
        try:
            user = users[thread.email]
            return getattr(user, 'username', 'Unknown')
        except NotFoundError:
            return f'Deleted User ({thread.email})'
    
    return Titled('Admin Management',
                 Card(
                     A('← Back to Home', hx_get='/', hx_target='body', 
                       style='display: block; margin-bottom: 20px; text-decoration: none;'),
                     H1("Admin Management Panel"),
                     
                     # User Management Section
                     Article(
                         H2("User Management"),
                         # Add new user form
                         Form(
                             H3("Add New User"),
                             Input(id="username", placeholder="Username", required=True),
                             Input(id="email", type="email", placeholder="Email", required=True),
                             Input(id="password", type="password", placeholder="Password", required=True),
                             Button("Add User", type="submit"),
                             Span(id="user-error", style="color: red;"),
                             hx_post="/mp/users/add",
                             hx_target="#users-list",
                             style="margin-bottom: 20px;"
                         ),
                         
                         # Users list
                         Table(
                             Tr(
                                 Th("Username"),
                                 Th("Email"),
                                 Th("Admin"),
                                 Th("Actions")
                             ),
                             *[Tr(
                                 Td(user.username),
                                 Td(user.email),
                                 Td("Yes" if user.username == 'bigboy' else "No"),
                                 Td(
                                     Button("Delete", 
                                           hx_delete=f"/mp/users/{user.email}",
                                           hx_target="#users-list",
                                           style="background-color: red;")
                                     if user.username != 'bigboy' else ''
                                 )
                             ) for user in all_users],
                             id="users-list"
                         ),
                         style="margin-bottom: 40px;"
                     ),
                     
                     # Content Management Section
                     Article(
                         H2("Content Management"),
                         Table(
                             Tr(
                                 Th("Title"),
                                 Th("Author"),
                                 Th("Posted"),
                                 Th("Actions")
                             ),
                             *[Tr(
                                 Td(thread.title),
                                 Td(get_author_display(thread)),
                                 Td(format_time(thread.created_at)),
                                 Td(
                                     Button("Delete", 
                                           hx_delete=f"/mp/threads/{thread.id}",
                                           hx_target="#threads-list",
                                           style="background-color: red;")
                                 )
                             ) for thread in sorted(all_threads, key=lambda t: t.created_at or 0, reverse=True)],
                             id="threads-list"
                         )
                     )
                 ))

# Admin API endpoints
@rt('/mp/users/add')
@admin_required
def post(session, username: str, email: str, password: str, is_admin: bool = False):
    try:
        # Check if user already exists
        try:
            users[email]
            return "User with this email already exists"
        except NotFoundError:
            pass
            
        # Check if username is taken
        for user in users():
            if getattr(user, 'username', None) == username:
                return "Username already taken"
        
        # Create new user (is_admin is determined by username)
        new_user = User(
            email=email,
            username=username,
            password=pwd_context.hash(password),
            is_admin=(username == 'bigboy')
        )
        users.insert(new_user)
        
        # Return updated user list
        return Table(
            Tr(
                Th("Username"),
                Th("Email"),
                Th("Admin"),
                Th("Actions")
            ),
            *[Tr(
                Td(user.username),
                Td(user.email),
                Td("Yes" if user.username == 'bigboy' else "No"),
                Td(
                    Button("Delete", 
                          hx_delete=f"/mp/users/{user.email}",
                          hx_target="#users-list",
                          style="background-color: red;")
                    if user.username != 'bigboy' else ''
                )
            ) for user in users()]
        )
    except Exception as e:
        return f"Error creating user: {str(e)}"

@rt('/mp/users/{email}')
@admin_required
def delete(session, email: str):
    try:
        user = users[email]
        if user.username == 'bigboy':
            return Response("Cannot delete admin account", status_code=403)
        
        # Delete user's threads first
        user_threads = get_user_threads(email)
        for thread in user_threads:
            threads.delete(thread.id)
            
        # Delete user
        users.delete(email)
        
        # Return updated user list
        return Table(
            Tr(
                Th("Username"),
                Th("Email"),
                Th("Admin"),
                Th("Actions")
            ),
            *[Tr(
                Td(user.username),
                Td(user.email),
                Td("Yes" if user.username == 'bigboy' else "No"),
                Td(
                    Button("Delete", 
                          hx_delete=f"/mp/users/{user.email}",
                          hx_target="#users-list",
                          style="background-color: red;")
                    if user.username != 'bigboy' else ''
                )
            ) for user in users()]
        )
    except NotFoundError:
        return Response("User not found", status_code=404)

@rt('/mp/threads/{tid}')
@admin_required
def delete(session, tid: int):
    try:
        threads.delete(tid)
        all_threads = threads()
        
        # Return updated threads list
        return Table(
            Tr(
                Th("Title"),
                Th("Author"),
                Th("Posted"),
                Th("Actions")
            ),
            *[Tr(
                Td(thread.title),
                Td(getattr(users[thread.email], 'username', 'Unknown') if thread.email else 'Anonymous'),
                Td(format_time(thread.created_at)),
                Td(
                    Button("Delete", 
                          hx_delete=f"/mp/threads/{thread.id}",
                          hx_target="#threads-list",
                          style="background-color: red;")
                )
            ) for thread in sorted(all_threads, key=lambda t: t.created_at or 0, reverse=True)]
        )
    except NotFoundError:
        return Response("Thread not found", status_code=404)

@rt('/')
def get(session):
    # Show different content based on auth status
    if 'auth' not in session:
        return Titled('Forum',
                     auth_header(),
                     render_stats())
    
    # Get latest 20 threads, handling None created_at values
    all_threads = threads()
    # Set a default timestamp for threads without created_at
    for thread in all_threads:
        if thread.created_at is None:
            thread.created_at = 0
    latest_threads = sorted(all_threads, 
                          key=lambda t: t.created_at or 0,
                          reverse=True)[:20]
    
    # Show header with username and profile link
    try:
        user = users[session['auth']]
        username = getattr(user, 'username', user.email)
        
        # Add admin link if user is admin
        header_items = [
            A(username, href=f'/profile/{username}', style="margin-right: 10px; text-decoration: none;")
        ]
        if getattr(user, 'is_admin', False):
            header_items.append(
                A("Admin Panel", href="/mp", style="margin-right: 10px; color: #ff4444;")
            )
        header_items.append(Button("Logout", hx_post="/logout", style="color: red;"))
        
        header = Div(*header_items, class_='auth-links')
    except NotFoundError:
        username = session['auth']
        header = Div(
            A(username, href=f'/profile/{username}', style="margin-right: 10px; text-decoration: none;"),
            Button("Logout", hx_post="/logout", style="color: red;"),
            class_='auth-links'
        )
    
    return Titled('Forum',
                 header,
                 Card(
                     mk_form(session),
                     Ul(*[render(t, session) for t in latest_threads], id='thread-list', class_='thread-list')
                 ))

@rt('/')
@basic_auth
def post(session, thread: Thread):
    user_email = session['auth']
    thread.created_at = time()
    thread.email = user_email
    thread.author = user_email
    new_thread = threads.insert(thread)
    return render(new_thread, session)

@rt('/edit/{tid}')
@basic_auth
def get(session, tid: int):
    thread = threads[tid]
    if thread.author != session['auth']:
        return Response('Not authorized to edit this thread', status_code=403)
    return Titled('Edit Thread',
                 Card(mk_edit_form(thread)))

@rt('/edit/{tid}')
@basic_auth
def post(session, tid: int, thread: Thread):
    existing = threads[tid]
    if existing.author != session['auth']:
        return Response('Not authorized to edit this thread', status_code=403)
    existing.title = thread.title
    existing.content = thread.content
    threads.update(existing)
    return Redirect('/')

@rt('/delete/{tid}')
@basic_auth
def delete(session, tid: int):
    thread = threads[tid]
    if thread.author != session['auth']:
        return Response('Not authorized to delete this thread', status_code=403)
    threads.delete(tid)
    return ''

@rt('/thread/{tid}')
def get(session, tid: int):
    thread = threads[tid]
    
    # Get username for display
    try:
        if thread.email:
            author = users[thread.email]
            author_display = getattr(author, 'username', 'Anonymous')
        else:
            author_display = "Anonymous"
    except NotFoundError:
        author_display = "Anonymous"
    
    return Titled(thread.title,
                 Card(
                     A('← Back to Home', hx_get='/', hx_target='body',
                       style='display: block; margin-bottom: 20px; text-decoration: none;'),
                     H2(thread.title),
                     P(thread.content, style='margin: 20px 0;'),
                     Div(
                         Span(f'Posted by {author_display}'),
                         Span(' • '),
                         Span(format_time(thread.created_at)),
                         style='color: #666; margin-bottom: 20px;'
                     ),
                     render_thread_controls(thread, session) if session and 'auth' in session else ''
                 ))

def render_thread_controls(thread, session):
    if session and 'auth' in session and hasattr(thread, 'author') and thread.author == session['auth']:
        return Div(
            A('Edit', hx_get=f'/edit/{thread.id}', hx_target='body',
              style='margin-right: 10px;'),
            A('Delete', hx_delete=f'/delete/{thread.id}',
              hx_target='body', hx_swap='outerHTML',
              style='color: red;',
              onclick="return confirm('Are you sure you want to delete this thread?')"
            )
        )
    return ''

def get_user_threads(email):
    """Get all threads by a specific user."""
    all_threads = threads()
    user_threads = [t for t in all_threads if t.email == email]
    return sorted(user_threads, key=lambda t: t.created_at or 0, reverse=True)

@rt('/profile/{username}')
@basic_auth
def get(session, username: str):
    try:
        profile_user = find_user_by_username(username)
        is_own_profile = session['auth'] == profile_user.email
        
        # Get user's threads
        user_threads = get_user_threads(profile_user.email)
        
        content = [
            A('← Back to Home', hx_get='/', hx_target='body', 
              style='display: block; margin-bottom: 20px; text-decoration: none;'),
            H1(f"{username}'s Profile", style="margin-bottom: 30px;")
        ]
        
        # Only show private information on own profile
        if is_own_profile:
            content.extend([
                Article(
                    H3("Account Information", style="margin-bottom: 20px;"),
                    P(f"Username: {username}"),
                    P(f"Email: {profile_user.email}"),
                    style="margin-bottom: 30px;"
                ),
                Article(
                    H3("Change Password", style="margin-bottom: 20px;"),
                    Form(
                        Input(type="password", placeholder="Current Password", 
                             id="current_password", required=True),
                        Input(type="password", placeholder="New Password", 
                             id="new_password", required=True),
                        Input(type="password", placeholder="Confirm New Password", 
                             id="confirm_password", required=True),
                        Button("Update Password", type="submit"),
                        Span(id="password-error", style="color: red;"),
                        hx_post=f"/profile/{username}/change-password",
                        hx_target="#password-error"
                    ),
                    style="margin-bottom: 30px;"
                )
            ])
        
        # Show user's threads
        content.append(
            Article(
                H3(f"Threads by {username}", style="margin-bottom: 20px;"),
                Ul(*[render(t, session) for t in user_threads]) if user_threads else P("No threads yet.")
            )
        )
        
        return Titled(f"{username}'s Profile",
                     Card(*content))
                     
    except NotFoundError:
        return Response("User not found", status_code=404)

@rt('/profile/{username}/change-password')
@basic_auth
def post(session, username: str, current_password: str, new_password: str, confirm_password: str):
    try:
        profile_user = find_user_by_username(username)
        if session['auth'] != profile_user.email:
            return Response("Not authorized", status_code=403)
            
        if new_password != confirm_password:
            return "New passwords do not match"
            
        if not pwd_context.verify(current_password, profile_user.password):
            return "Current password is incorrect"
            
        profile_user.password = pwd_context.hash(new_password)
        users.update(profile_user)
        return "Password updated successfully"
        
    except NotFoundError:
        return Response("User not found", status_code=404)

def create_secure_session():
    return {
        'id': token_urlsafe(32),
        'created_at': time(),
        'last_active': time()
    }

def is_session_valid(session):
    if 'created_at' not in session:
        return False
    # Expire sessions after 24 hours
    if time() - session['created_at'] > 86400:
        return False
    # Expire sessions inactive for 30 minutes
    if time() - session['last_active'] > 1800:
        return False
    return True

def generate_csrf_token(session):
    if 'csrf_token' not in session:
        session['csrf_token'] = token_urlsafe(32)
    return session['csrf_token']

def verify_csrf_token(session, token):
    return token and token == session.get('csrf_token')

serve()
